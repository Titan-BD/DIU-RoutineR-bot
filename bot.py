import json
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ржЖржкржирж╛рж░ BotFather ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржЯрзЛржХрзЗржиржЯрж┐ ржПржЦрж╛ржирзЗ ржкрзЗрж╕рзНржЯ ржХрж░рзБржи
BOT_TOKEN = "8380820208:AAGOGG7QxuFNdr_rosTN38_7dGK1Qb81_xQ" 

# рж░рзБржЯрж┐ржи ржлрж╛ржЗрж▓ржЯрж┐ рж▓рзЛржб ржХрж░рж╛
def load_routine():
    with open('routine.json', 'r') as f:
        return json.load(f)

# рж░рзБржЯрж┐ржи ржлрж░ржорзНржпрж╛ржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
def format_schedule(schedule, day_name):
    if not schedule:
        return f"ржЖржЧрж╛ржорзАржХрж╛рж▓ ({day_name}) ржХрзЛржирзЛ ржХрзНрж▓рж╛рж╕ ржирзЗржЗред"

    message = f"ЁЯУЕ **{day_name}**-ржПрж░ ржХрзНрж▓рж╛рж╕рзЗрж░ рж░рзБржЯрж┐ржи:\n\n"
    for item in schedule:
        message += f"ЁЯХС **рж╕ржорзЯ:** {item['time']}\n"
        message += f"ЁЯУЪ **ржХрзЛрж░рзНрж╕:** {item['course']}\n"
        message += f"ЁЯЪк **рж░рзБржо:** {item['room']}\n"
        message += "---------------------\n"
    
    return message

# /start ржХржорж╛ржирзНржбрзЗрж░ ржлрж╛ржВрж╢ржи
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        f"рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!\n\n"
        f"ржЖржорж┐ Daffodil EEE ржбрж┐ржкрж╛рж░рзНржЯржорзЗржирзНржЯрзЗрж░ рж░рзБржЯрж┐ржи ржмржЯред\n\n"
        f"ржЖржЬржХрзЗрж░ рж░рзБржЯрж┐ржи ржжрзЗржЦрждрзЗ ржЯрж╛ржЗржк ржХрж░рзБржи: /today\n"
        f"ржЖржЧрж╛ржорзАржХрж╛рж▓рзЗрж░ рж░рзБржЯрж┐ржи ржжрзЗржЦрждрзЗ ржЯрж╛ржЗржк ржХрж░рзБржи: /tomorrow"
    )

# /today ржХржорж╛ржирзНржбрзЗрж░ ржлрж╛ржВрж╢ржи
async def today_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    routine = load_routine()
    
    # ржЖржЬржХрзЗрж░ ржжрж┐ржирзЗрж░ ржирж╛ржо (ржпрзЗржоржи: Saturday) ржмрзЗрж░ ржХрж░рж╛
    # ржЯрж╛ржЗржоржЬрзЛржи ржарж┐ржХ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп (ржмрж╛ржВрж▓рж╛ржжрзЗрж╢)
    tz = datetime.timezone(datetime.timedelta(hours=6))
    today = datetime.datetime.now(tz).strftime('%A') # %A ржжрж┐рж▓рзЗ ржжрж┐ржирзЗрж░ ржкрзБрж░рзЛ ржирж╛ржо ржЖрж╕рзЗ
    
    schedule = routine.get(today, [])
    
    if not schedule:
        await update.message.reply_text(f"ржЖржЬ ({today}) ржХрзЛржирзЛ ржХрзНрж▓рж╛рж╕ ржирзЗржЗред")
    else:
        message = format_schedule(schedule, f"ржЖржЬ ({today})")
        await update.message.reply_html(message)

# /tomorrow ржХржорж╛ржирзНржбрзЗрж░ ржлрж╛ржВрж╢ржи
async def tomorrow_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    routine = load_routine()
    
    # ржЯрж╛ржЗржоржЬрзЛржи ржарж┐ржХ рж░рзЗржЦрзЗ ржЖржЧрж╛ржорзАржХрж╛рж▓рзЗрж░ рждрж╛рж░рж┐ржЦ ржУ ржжрж┐ржирзЗрж░ ржирж╛ржо ржмрзЗрж░ ржХрж░рж╛
    tz = datetime.timezone(datetime.timedelta(hours=6))
    tomorrow_date = datetime.datetime.now(tz) + datetime.timedelta(days=1)
    tomorrow_day_name = tomorrow_date.strftime('%A')
    
    schedule = routine.get(tomorrow_day_name, [])
    
    message = format_schedule(schedule, tomorrow_day_name)
    await update.message.reply_html(message)

# ржмржЯ ржЪрж╛рж▓рж╛ржирзЛрж░ ржорзВрж▓ ржлрж╛ржВрж╢ржи
def main():
    # ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржмрж┐рж▓рзНржб ржХрж░рж╛
    application = Application.builder().token(BOT_TOKEN).build()

    # ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ ржпрзЛржЧ ржХрж░рж╛
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("today", today_schedule))
    application.add_handler(CommandHandler("tomorrow", tomorrow_schedule))

    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛
    print("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    application.run_polling()

if __name__ == "__main__":
    main()
